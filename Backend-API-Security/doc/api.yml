openapi: 3.0.0
info:
  title: STARSHOP-API
  version: 1.4.1
  description: An API for an online shop
paths:
  /user/login:
    post:
      description: Login endpoint
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '201':
          description: Login successful
        '401':
          description: Invalid credentials
  /users:
    post:
      description: Create a new user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
    get:
      description: Get all users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
  /users/{userId}:
    get:
      description: Retrieve a specific user by ID
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '404':
          description: User not found
    put:
      description: Update a user by ID
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: User not found
    delete:
      description: Delete a user by ID
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: User not found
  /products:
    get:
      description: List all products
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      description: Create a new product
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
      responses:
        '201':
          description: Product created successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
  /products/{productId}:
    get:
      description: Retrieve a product by ID
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
    put:
      description: Update a product by ID
      security:
        - BearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductUpdate'
      responses:
        '200':
          description: Product updated successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: Product not found
    delete:
      description: Delete a product by ID
      security:
        - BearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Product deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Product not found
  /companies:
    get:
      description: List all companies
      responses:
        '200':
          description: A list of companies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CompanyWithProducts'
    post:
      description: Create a new company
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyCreate'
      responses:
        '201':
          description: New company created successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
  /companies/{companyId}:
    get:
      description: Retrieve a specific company and its products
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Company and its products retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyWithProducts'
        '404':
          description: Company not found
    put:
      description: Update a specific company by ID
      security:
        - BearerAuth: []
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyUpdate'
      responses:
        '200':
          description: Company updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: Company not found
    delete:
      description: Delete a company by ID
      security:
        - BearerAuth: []
      parameters:
        - name: companyId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Company deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Company not found
components:
  schemas:
    Login:
      type: object
      properties:
        user:
          type: string
        password:
          type: string
      required:
        - user
        - password
    User:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the user
        username:
          type: string
        email:
          type: string
        role:
          type: string
    UserCreate:
      type: object
      properties:
        user:
          type: string
        password:
          type: string
        email:
          type: string
        role_id:
          type: integer
      required:
        - user
        - password
        - email
        - role_id
    UserUpdate:
      type: object
      properties:
        user:
          type: string
        email:
          type: string
        role_id:
          type: string
        password:
          type: string
    Product:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the product
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        image:
          type: string
          description: Base64 encoded image of the product
        rating:
          type: number
          description: Rating of the product
        company:
          $ref: '#/components/schemas/Company'
    ProductCreate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        image:
          type: string
          description: Base64 encoded image of the product
        rating:
          type: number
        companyId:
          type: string
          description: ID of the company associated with the product
      required:
        - name
        - description
        - price
        - companyId
        - image
    ProductUpdate:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        image:
          type: string
          description: Base64 encoded image of the product
        rating:
          type: number
        companyId:
          type: string
          description: ID of the company associated with the product
    Company:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the company
        name:
          type: string
    CompanyCreate:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    CompanyUpdate:
      type: object
      properties:
        name:
          type: string
    CompanyWithProducts:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the company
        name:
          type: string
        products:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              name:
                type: string
              description:
                type: string
              price:
                type: number
                format: float
              image_data:
                type: string
                description: Base64 encoded image data
              rating:
                type: number
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - BearerAuth: []
